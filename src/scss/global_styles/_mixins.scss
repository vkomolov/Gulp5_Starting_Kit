@use 'sass:math';

$flex-box-row-center-wrap: row, center, center, wrap;
$flex-box-row-center-nowrap: row, center, center, nowrap;
$flex-box-row-between-wrap: row, space-between, center, wrap;
$flex-box-row-between-nowrap: row, space-between, center, nowrap;
$flex-box-row-left-wrap: row, flex-start, center, wrap;
$flex-box-row-left-nowrap: row, flex-start, center, nowrap;
$flex-box-row-right-wrap: row, flex-end, center, wrap;
$flex-box-row-right-nowrap: row, flex-end, center, nowrap;
$flex-box-row-top-wrap: row, center, flex-start, wrap;
$flex-box-row-top-nowrap: row, center, flex-start, nowrap;
$flex-box-row-bottom-wrap: row, center, flex-end, wrap;
$flex-box-row-bottom-nowrap: row, center, flex-end, nowrap;
$flex-box-col-left-wrap: column, center, flex-start;
$flex-box-col-right-wrap: column, center, flex-end;
$flex-box-col-top-wrap: column, flex-start, center;
$flex-box-col-center-wrap: column, center, center;
$element-shadow: 0.15em, 0.3em, rgba(0, 0, 0, .8);

///MIXIN

@mixin flex-box ($flow, $justify, $align, $wrap:wrap) {
  display: flex;
  flex-flow: $flow $wrap;
  justify-content: $justify;
  align-items: $align;
}

@mixin transition($property: null, $time: 0.15s) {
  @if $property != null {
    transition: $property $time ease-in-out;
  }
  @else {
    transition: $time ease-in-out;
  }
}

@mixin init-font ($font-size, $font-weight) {
  font: {
    size: $font-size;
    weight: $font-weight;
  }
}

//$font-size-actual - the actual font size in px. If measure unit is not in px, then to return the initial text-shadow
@mixin init-text-shadow-3d($fontSizeActualPx, $shadowColor, $glowColor: null) {
  $m-unit: unit($fontSizeActualPx); //measure unit
  $font-num: strip-unit($fontSizeActualPx); //numeric value of the font-size
  $ratio-px: 13;
  $max-layers: 1;
  $shadow: rgba(0, 0, 0, 0.15) -3px 7px 10px;
  $shadow-offset-px: 1px;

  @if $m-unit == "px" {
    $max-layers: round($font-num / $ratio-px);
    @if $max-layers > 1 {
      @for $i from 1 through $max-layers {
        $offset: -$i * $shadow-offset-px;
        $shadow: #{$shadow}, #{$shadowColor} #{$offset} 1px 1px;
      }
    }
  }

  @if $glowColor != null {
    $shadow: #{$shadow}, $glowColor -5px 2px 100px;
  }

  text-shadow: $shadow;
}

/**
* it gives background to the text: gradient, image, etc...
* $background - background-image, gradient etc...
* [$text-color = null] - the color of the text with transparent opacity to view the background underneath
 */
@mixin init-text-background($background, $text-color: null) {
  background: $background no-repeat center/cover;
  background-clip: text;
  -webkit-background-clip: text;

  @if $text-color == null {
    color: transparent;
  }
  @else {
    color: $text-color;
  }
}

@mixin text-shadow($dim, $shadow, $color:rgba(0,0,0,0.8)) {
  text-shadow: $dim $dim $shadow $color;
}

@mixin box-shadow($dim, $shadow, $color:rgba(0,0,0,0.8)) {
  box-shadow: $dim $dim $shadow $color;
}

@mixin init-scroll($width, $thumbColor, $trackColor) {
  overflow-x: hidden;
  overflow-y: auto;
  scroll-behavior: smooth;

  /* width */
  &::-webkit-scrollbar {
    width: $width;
  }

  /* Handle */
  &:hover::-webkit-scrollbar-thumb {
    background-color: $thumbColor;
  }

  /* Track */
  &:hover::-webkit-scrollbar-track {
    background-color: $trackColor;
  }
}

//!!! will overwrite the text-shadow styles to glowing shadow around the text
@mixin glowing-text-shadow($glowColor) {
  text-shadow: $glowColor -5px 2px 100px;
}

////////////// FUNCTIONS ////////////////
//!!! the arguments must be integers, default measure unit is "px" (1280, 640, 80, 32, px)
@function calculate-dimension($max-width, $min-width, $max-value, $min-value, $measure:px) {
  $width-range: $max-width - $min-width;
  $value-diff: $max-value - $min-value;

  //ensure that the viewport width value always stays between $min-width and $max-width
  //@return calc($value-diff * (min(max(100vw, #{$min-width}px), #{$max-width}px) - #{$min-width}px) / $width-range + #{$min-value}px);
  @return calc($value-diff * (min(max(100vw, #{$min-width}#{$measure}), #{$max-width}#{$measure}) - #{$min-width}#{$measure}) / $width-range + #{$min-value}#{$measure});
}

@function strip-unit($number) {
  @if type-of($number) == 'number' and not unitless($number) {
    @return math.div($number, ($number * 0 + 1));
  }

  @return $number;
}
